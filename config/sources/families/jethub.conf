BOOTSCRIPT="boot-meson64.cmd:boot.cmd"
BOOTENV_FILE='meson.txt'

if [[ $BOARD == jethub-j80 ]]; then
	LINUXFAMILY=jethubj80
elif [[ $BOARD == jethub-j100 ]]; then
	LINUXFAMILY=jethubj100
else
	exit_with_error "Unexpected board \"$BOARD\""
fi

ARCH=arm64
SERIALCON=ttyAML0
SRC_LOADADDR='LOADADDR=0x1080000'
OVERLAY_PREFIX='meson'

# this family does not need it
ATF_COMPILE="no"

CPUMIN=100000
CPUMAX=1200000
GOVERNOR=conservative

case $BRANCH in

	current)
		KERNELBRANCH='branch:linux-5.9.y'
		KERNELPATCHDIR='meson64-current'
	;;

esac

family_tweaks_bsp()
{
	:
}

family_tweaks()
{
	:
}

# example: 2015.01-armbian-g673bbb420e
# parsed from uboot.release
uboot_version_variant_1()
{
	local result
	result=$(<uboot.release)
	[[ -z "$result" ]] && return 1
	echo "$result"
}

# example: 2020.22.10.53
# parsed from timestamp_autogenerated.h
uboot_version_variant_2()
{
	local file=timestamp_autogenerated.h

	local date_line
	date_line=$(sed '1q;d' $file)
	[[ -z "$date_line" ]] && return 1
	local date_stamp
	date_stamp=$(grep --only-matching --perl-regexp '(?<=")[^"]+' <(echo $date_line))
	[[ -z "$date_stamp" ]] && return 2
	local date_result
	date_result=$(date --date="$date_stamp" +%Y.%m.%d)
	[[ -z "$date_result" ]] && return 3

	local time_line
	time_line=$(sed '2q;d' $file)
	[[ -z "$time_line" ]] && return 4
	local time_stamp
	time_stamp=$(grep --only-matching --perl-regexp '(?<=")[^"]+' <(echo $time_line))
	[[ -z "$time_stamp" ]] && return 5
	local time_result
	time_result=$(awk -F':' '{ printf "%s.%s\n", $1, $2 }' <(echo "$time_stamp"))
	[[ -z "$time_result" ]] && return 6

	echo "${date_result}.${time_result}"
}

compile_uboot()
{
	# not optimal, but extra cleaning before overlayfs_wrapper should keep sources directory clean
	if [[ $CLEAN_LEVEL == *make* ]]; then
		display_alert "Cleaning" "$BOOTSOURCEDIR" "info"
		(cd "${SRC}/cache/sources/${BOOTSOURCEDIR}"; make clean > /dev/null 2>&1)
	fi

	if [[ $USE_OVERLAYFS == yes ]]; then
		local ubootdir
		ubootdir=$(overlayfs_wrapper "wrap" "$SRC/cache/sources/$BOOTSOURCEDIR" "u-boot_${LINUXFAMILY}_${BRANCH}")
	else
		local ubootdir="$SRC/cache/sources/$BOOTSOURCEDIR"
	fi
	cd "${ubootdir}" || exit

	fetch_from_repo "https://github.com/jethome-ru/jethub-prebuilt-u-boot.git" "jethub-prebuilt-u-boot" "branch:master"

	local prebuilt_uboot_dir=$SRC/cache/sources/jethub-prebuilt-u-boot
	cd "$prebuilt_uboot_dir/${BOARD}" || exit

	# parse version
	local version
	local version_variant=1
	version=$(uboot_version_variant_${version_variant}) || exit_with_error "uboot_version_variant_${version_variant} failed with exit code $?"

	display_alert "Using precompiled u-boot" "$version" "info"

	# create directory structure for the .deb package
	uboottempdir=$(mktemp -d)
	chmod 700 ${uboottempdir}
	trap "rm -rf \"${uboottempdir}\" ; exit 0" 0 1 2 3 15
	local uboot_name=${CHOSEN_UBOOT}_${REVISION}_${ARCH}
	rm -rf $uboottempdir/$uboot_name
	mkdir -p $uboottempdir/$uboot_name/usr/lib/{u-boot,$uboot_name} $uboottempdir/$uboot_name/DEBIAN

	# parse compiler version
	local compiler_prefix="u-boot compiler version:"

	local compiler_line
	compiler_line=$(awk -F'"' '$1 ~ /CC_VERSION_STRING/ {print $2}' version_autogenerated.h)
	[[ -z "$compiler_line" ]] && exit_with_error "$compiler_prefix parse compiler_line error"

	local compiler_name
	compiler_name=$(echo "$compiler_line" | cut -d' ' -f1)
	[[ -z "$compiler_name" ]] && exit_with_error "$compiler_prefix parse compiler_name error"

	local compiler_version
	compiler_version=$(echo "$compiler_line" | awk -F') ' '{print $2}' | cut -d' ' -f1)
	[[ -z "$compiler_version" ]] && exit_with_error "$compiler_prefix parse compiler_version error"

	display_alert "u-boot compiler version" "$compiler_name $compiler_version" "info"

	# declare -f on non-defined function does not do anything
	cat <<-EOF > "$uboottempdir/${uboot_name}/usr/lib/u-boot/platform_install.sh"
	DIR=/usr/lib/$uboot_name
	$(declare -f write_uboot_platform)
	EOF

	# set up control file
	cat <<-EOF > "$uboottempdir/${uboot_name}/DEBIAN/control"
	Package: linux-u-boot-${BOARD}-${BRANCH}
	Version: $REVISION
	Architecture: $ARCH
	Maintainer: $MAINTAINER <$MAINTAINERMAIL>
	Installed-Size: 1
	Section: kernel
	Priority: optional
	Provides: armbian-u-boot
	Replaces: armbian-u-boot
	Conflicts: armbian-u-boot, u-boot-sunxi
	Description: Uboot loader $version
	EOF

	# import bootloader main binary file
	cp u-boot.bin "$uboottempdir/${uboot_name}/usr/lib/${uboot_name}/"

	# copy config file to the package
	# useful for FEL boot with overlayfs_wrapper
	[[ -f .config && -n $BOOTCONFIG ]] && cp .config "$uboottempdir/${uboot_name}/usr/lib/u-boot/${BOOTCONFIG}"

	display_alert "Building deb" "${uboot_name}.deb" "info"
	fakeroot dpkg-deb -b "$uboottempdir/${uboot_name}" "$uboottempdir/${uboot_name}.deb" >> "${DEST}"/debug/output.log 2>&1
	rm -rf "$uboottempdir/${uboot_name}"

	[[ ! -f $uboottempdir/${uboot_name}.deb ]] && exit_with_error "Building u-boot package failed"

	rsync --remove-source-files -rq "$uboottempdir/${uboot_name}.deb" "${DEB_STORAGE}/"
	rm -rf "$uboottempdir"
}

write_uboot_platform()
{
	local unable_install_uboot="Unable to install U-Boot."

	if [[ "$2" = *mmcblk* ]]; then
		local mmcblk_prefix
		mmcblk_prefix=$(echo "$2" | grep -Po "mmcblk\d")
		logger "${FUNCNAME[0]}(): mmcblk_prefix = $mmcblk_prefix"

		if [[ -n "$mmcblk_prefix" ]]; then
			local mmc_boot=${mmcblk_prefix}boot
			local of_boot0=/dev/${mmc_boot}0
			local of_boot1=/dev/${mmc_boot}1
			local of_bootloader=/dev/disk/by-partlabel/bootloader
			local of_env=/dev/disk/by-partlabel/env
		else
			logger "${FUNCNAME[0]}(): mmcblk_prefix is empty. $unable_install_uboot"
			return 1
		fi
	elif [[ "$2" = /dev/loop* ]]; then
		return 0
	else
		logger "${FUNCNAME[0]}(): Unexpected 2nd argument \"$2\". $unable_install_uboot"
		return 2
	fi

	logger "${FUNCNAME[0]}(): of_boot0 = $of_boot0"
	logger "${FUNCNAME[0]}(): of_boot1 = $of_boot1"
	logger "${FUNCNAME[0]}(): of_bootloader = $of_bootloader"
	logger "${FUNCNAME[0]}(): of_env = $of_env"

	if [[ "$2" = *mmcblk* ]]; then
		# unset force-read-only flag
		echo 0 > "/sys/block/${mmc_boot}0/force_ro"
		echo 0 > "/sys/block/${mmc_boot}1/force_ro"
		logger "${FUNCNAME[0]}(): /sys/block/${mmc_boot}0/force_ro value after unsetting read-only flag: $(<"/sys/block/${mmc_boot}0/force_ro")"
		logger "${FUNCNAME[0]}(): /sys/block/${mmc_boot}1/force_ro value after unsetting read-only flag: $(<"/sys/block/${mmc_boot}1/force_ro")"
	fi

	local uboot_name=u-boot.bin
	local uboot_size_in_kbytes=$(($(stat --printf "%s" "$1/$uboot_name")/1024))
	local uboot_offset=1 # 512 bytes in dd
	logger "${FUNCNAME[0]}(): uboot_size_in_kbytes = $uboot_size_in_kbytes"
	logger "${FUNCNAME[0]}(): uboot_offset = $uboot_offset"
	local result=
	if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="$of_boot0" conv=fsync > /dev/null 2>&1; then
		if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="$of_boot1" conv=fsync > /dev/null 2>&1; then
			if dd seek=$uboot_offset ibs=1024 count=$uboot_size_in_kbytes if="$1/$uboot_name" of="$of_bootloader" conv=fsync > /dev/null 2>&1; then
				logger "do defenv"
				local env_size_in_mbytes=$(($(blockdev --getsize64 "$of_env")/1024/1024))
				logger "${FUNCNAME[0]}(): env_size_in_mbytes = $env_size_in_mbytes"
				if dd bs=1M count=$env_size_in_mbytes if=/dev/zero of="$of_env" conv=fsync > /dev/null 2>&1; then
					sync
					result=1
				fi
			fi
		fi
	fi
	if [[ -n "$result" ]]; then
		logger "${FUNCNAME[0]}(): u-boot successfulley installed"
	else
		logger "${FUNCNAME[0]}(): dd commands failed. $unable_install_uboot"
		return 3
	fi
}

detect_partition() {
	if [[ -n "$1" ]] ; then
		local detected_partition
		detected_partition=$(fdisk -l "$1" | grep -P -A 100 "Device.+Boot.+Start.+End.+Sectors.+Size.+Id.+Type")
		local partition_line
		partition_line=$(echo "$detected_partition" | head -n2 | tail -n1)
		[[ -z "$partition_line" ]] && return 1
		partition_start=$(echo "$partition_line" | awk '{print $2}')
		[[ -z "$partition_start" ]] && return 2
		partition_size=$(echo "$partition_line" | awk '{print $4}')
		[[ -z "$partition_size" ]] && return 3
		echo "${partition_start} ${partition_size}"
	else
		return 4
	fi
}

extract_partition() {
	if [[ -n "$1" || -n "$2" || -n "$3" || -n "$4" ]] ; then
		local input_file="$1"
		local skip="$2"
		local count="$3"
		local output_file="$4"
		# 1b = 512 bytes
		dd bs=1b skip="$skip" count="$count" if="$input_file" of="$output_file" > /dev/null 2>&1 || return 1
	else
		return 2
	fi
}

post_build_image()
{
	local tools=jethub-aml-tools
	fetch_from_repo "https://github.com/jethome-ru/$tools" "$tools" "branch:main"

	if [[ $BOARD == jethub-j80 ]]; then
		local dtb_file=meson-gxl-s905w-jethome-jethub-j80.dtb
	elif [[ $BOARD == jethub-j100 ]]; then
		local dtb_file=meson-axg-jethome-jethub-j100.dtb
	else
		exit_with_error "Unexpected board \"$BOARD\""
	fi

	local packing_dir
	packing_dir=$(mktemp --tmpdir="${DEST}/images" --directory -t aml-packing-XXXXXXXXXX)
	[[ -z "$packing_dir" ]] && exit_with_error "mktemp failed"
	cp "$SRC/cache/sources/$LINUXSOURCEDIR/arch/arm64/boot/dts/amlogic/$dtb_file" "$packing_dir/" || { rm -rf "$packing_dir"; exit_with_error "Copying $dtb_file failed"; }
	local dtb_image_file=dtb.img
	"$SRC"/cache/sources/$tools/dtbTool --output-file "$packing_dir/$dtb_image_file" "$packing_dir/" || { rm -rf "$packing_dir"; exit_with_error "dtbTool failed"; }
	[[ ! -f "$packing_dir/$dtb_image_file" ]] && { rm -rf "$packing_dir"; exit_with_error "Creating $dtb_image_file failed"; }

	cp "$SRC/cache/sources/jethub-prebuilt-u-boot/${BOARD}/u-boot.bin"* "$packing_dir/" || { rm -rf "$packing_dir"; exit_with_error "Copying u-boot.bin* files failed"; }

	# set up aml packer config file
	cat <<-END > "$packing_dir/package.conf" || { rm -rf "$packing_dir"; exit_with_error "Creating package.conf failed"; }
	[LIST_NORMAL]
	#partition images, don't need verfiy
	file="u-boot.bin.usb.bl2"   main_type= "USB"       sub_type="DDR"
	file="u-boot.bin.usb.tpl"   main_type= "USB"       sub_type="UBOOT"
	file="platform.conf"        main_type= "conf"      sub_type="platform"
	file="dtb.img"              main_type="dtb"        sub_type="meson1"

	[LIST_VERIFY]
	#partition images with verify
	file="rootfs.PARTITION"     main_type="PARTITION"  sub_type="rootfs"
	file="u-boot.bin"           main_type="PARTITION"  sub_type="bootloader"
	file="dtb.img"              main_type="PARTITION"  sub_type="_aml_dtb"
	END

	cp "$SRC/packages/bsp/jethub/${BOARD}/platform.conf" "$packing_dir/" || { rm -rf "$packing_dir"; exit_with_error "Copying platform.conf failed"; }

	local rootfs_partition
	rootfs_partition="$(detect_partition "$1")" || { rm -rf "$packing_dir"; exit_with_error "detect_partition failed"; }
	local rootfs_partition_start="${rootfs_partition%% *}"
	local rootfs_partition_size="${rootfs_partition##* }"

	extract_partition "$1" "$rootfs_partition_start" "$rootfs_partition_size" "$packing_dir/rootfs.PARTITION" || \
	{ local code=$?; rm -rf "$packing_dir"; exit_with_error "extract_partition failed with code $code"; }

	local packing_output_name
	packing_output_name="$(basename "$1" .img)-burn.img"

	"$SRC"/cache/sources/$tools/aml_image_v2_packer_new -r "$packing_dir/package.conf" "$packing_dir/" "${DEST}/images/$packing_output_name" || { rm -rf "$packing_dir"; exit_with_error "aml_image_v2_packer_new failed"; }

	rm -rf "$packing_dir"
}
